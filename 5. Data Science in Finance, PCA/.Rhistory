2,
3,
4,
5
),
Nama.Segmen = c("Diamond Senior Member",
"Gold Young Professional",
"Silver Youth Gals",
"Diamond Professional",
"Silver Mid Professional")
)
# Menamakan Segmen
Segmen.Pelanggan <- data.frame(
cluster = c(
1,
2,
3,
4,
5
),
Nama.Segmen = c("Diamond Senior Member",
"Gold Young Professional",
"Silver Youth Gals",
"Diamond Professional",
"Silver Mid Professional")
)
# Menggabungkan Referensi
Identitas.Cluster <- list(
Profesi = Profesi,
Jenis.Kelamin = Jenis.Kelamin,
Tipe.Residen = Tipe.Residen,
Segmentasi = segmentasi,
Segmen.Pelanggan = Segmen.Pelanggan,
field_yang_digunakan = field_yang_digunakan
)
Segmen.Pelanggan
Identitas.Cluster$Segmen.Pelanggan
# Menamakan Segmen
Segmen.Pelanggan <- data.frame(
cluster = c(
1,
2,
3,
4,
5
),
Nama.Segmen = c("Diamond Senior Member",
"Gold Young Professional",
"Silver Youth Gals",
"Diamond Professional",
"Silver Mid Professional")
)
# Menggabungkan Referensi
Identitas.Cluster <- list(
Profesi = Profesi,
Jenis.Kelamin = Jenis.Kelamin,
Tipe.Residen = Tipe.Residen,
Segmentasi = segmentasi,
Segmen.Pelanggan = Segmen.Pelanggan,
field_yang_digunakan = field_yang_digunakan
)
# Menyimpan Objek dalam Bentuk File
saveRDS(Identitas.Cluster,"cluster2.rds")
# Mengoperasionalkan Model K-Means
#membuat data baru
databaru <- data.frame(Customer_ID="CUST-100",
Nama.Pelanggan="Rudi Wilamar",
Umur=20,
Jenis.Kelamin="Wanita",
Profesi="Pelajar",
Tipe.Residen="Cluster",
NilaiBelanjaSetahun=3.5)
databaru
# Memuat Objek Clustering dari File
Identitas.Cluster <- readRDS(file = "cluster.rds")
Identitas.Cluster
#Merge dengan Data Referensi
databaru <- merge(
databaru,
Identitas.Cluster$Profesi
)
databaru <- merge(
databaru,
Identitas.Cluster$Jenis.Kelamin
)
databaru <- merge(
databaru,
Identitas.Cluster$Tipe.Residen
)
#
databaru$Umur <- 31
which.min(
sapply(
1:5,
function (x) sum(
(databaru[Identitas.Cluster$field_yang_digunakan]-Identitas.Cluster$Segmentasi$centers[x,])^2
)
)
)
Identitas.Cluster$Segmen.Pelanggan[
which.min(
sapply(
1:5,
function (x) sum(
(databaru[Identitas.Cluster$field_yang_digunakan]-Identitas.Cluster$Segmentasi$centers[x,])^2
)
)
)
,
]
Segmen.Pelanggan
Identitas.Cluster$Segmen.Pelanggan
Segmen.Pelanggan <- data.frame(
cluster = c(
1,
2,
3,
4,
5
),
Nama.Segmen = c("Diamond Senior Member",
"Gold Young Professional",
"Silver Youth Gals",
"Diamond Professional",
"Silver Mid Professional")
)
# Menggabungkan Referensi
Identitas.Cluster <- list(
Profesi = Profesi,
Jenis.Kelamin = Jenis.Kelamin,
Tipe.Residen = Tipe.Residen,
Segmentasi = segmentasi,
Segmen.Pelanggan = Segmen.Pelanggan,
field_yang_digunakan = field_yang_digunakan
)
Identitas.Cluster$Segmen.Pelanggan
Segmen.Pelanggan
databaru$Umur <- 31
which.min(
sapply(
1:5,
function (x) sum(
(databaru[Identitas.Cluster$field_yang_digunakan]-Identitas.Cluster$Segmentasi$centers[x,])^2
)
)
)
Identitas.Cluster$Segmen.Pelanggan[
which.min(
sapply(
1:5,
function (x) sum(
(databaru[Identitas.Cluster$field_yang_digunakan]-Identitas.Cluster$Segmentasi$centers[x,])^2
)
)
)
,
]
source('C:/Users/User/R Folder/3. Projects/4. Data Science in Marketing, Customer Segmentation/cs.R')
#
databaru$Umur <- 81
which.min(
sapply(
1:5,
function (x) sum(
(databaru[Identitas.Cluster$field_yang_digunakan]-Identitas.Cluster$Segmentasi$centers[x,])^2
)
)
)
Identitas.Cluster$Segmen.Pelanggan[
which.min(
sapply(
1:5,
function (x) sum(
(databaru[Identitas.Cluster$field_yang_digunakan]-Identitas.Cluster$Segmentasi$centers[x,])^2
)
)
)
,
]
# Menggabungkan Referensi
Identitas.Cluster <- list(
Profesi = Profesi,
Jenis.Kelamin = Jenis.Kelamin,
Tipe.Residen = Tipe.Residen,
Segmentasi = segmentasi,
Segmen.Pelanggan = Segmen.Pelanggan,
field_yang_digunakan = field_yang_digunakan
)
which.min(
sapply(
1:5,
function (x) sum(
(databaru[Identitas.Cluster$field_yang_digunakan]-Identitas.Cluster$Segmentasi$centers[x,])^2
)
)
)
Identitas.Cluster$Segmen.Pelanggan[
which.min(
sapply(
1:5,
function (x) sum(
(databaru[Identitas.Cluster$field_yang_digunakan]-Identitas.Cluster$Segmentasi$centers[x,])^2
)
)
)
,
]
source('C:/Users/User/R Folder/3. Projects/4. Data Science in Marketing, Customer Segmentation/cs.R')
mydata <- read.csv("https://wiki.q-researchsoftware.com/images/b/b9/Ownership.csv", header = TRUE, fileEncoding="latin1")
mydata <- read.csv("https://wiki.q-researchsoftware.com/images/b/b9/Ownership.csv", header = TRUE, fileEncoding="latin1")
#the cor function
mydata.cor <- cor(mydata)
mydata.cor <- cor(
mydata,
method = c(
'spearman'
)
)
mydata.cor
view(mydata.cor)
View(mydata.cor)
# run the correlation matrix with p-values
library(Hmisc)
mydata.rcorr <- rcorr(
as.matrix(mydata)
)
# By default, the correlations and p-values are stored in an object of class type rcorr. To extract the values from this object into a useable data structure, you can use the following syntax
mydata.coeff <- mydata.rcorr$r
mydata.p <- mydata.rcorr$P
View(mydata.coeff)
View(mydata.p)
# Visualizing the correlation matrix
library(corrplot)
corrplot(mydata.cor)
# visualizing using heatmap
palette <- colorRampPalette(
c(
'green',
'white',
'red'
)
) (20)
heatmap(
x = mydata.cor,
col = palette,
symm = TRUE
)
heatmap(
x = mydata.cor,
col = palette,
symm = FALSE
)
heatmap(
x = mydata.cor,
col = palette,
symm = TRUE
)
# visualizing using plotly heatmap
library(plotly)
View(mydata.cor)
round(mydata.cor, 2)
mydata.cor <- round(mydata.cor, 2)
names(mydata.cor)
mydata.cor$iPod
typeof(mydata.cor)
tt <- data.frame(mydata.cor)
tt
View(tt)
names(tt)
# visualizing using plotly heatmap
# creating df
df.cor <- data.frame(mydata.cor)
row.names(df.cor)
plot_ly(
x = names(df.cor),
y = row.names(df.cor),
z = df.cor,
type = 'heatmap'
)
m <- matrix(rnorm(9), nrow = 3, ncol = 3)
p <- plot_ly(
x = c("a", "b", "c"), y = c("d", "e", "f"),
z = m, type = "heatmap"
)
p
m
m$values
plot_ly(
z = df.cor,
type = 'heatmap'
)
plot_ly(
z = df.cor,
type = 'heatmap'
)
p <- plot_ly(
z = df.cor,
type = 'heatmap'
)
p <- plot_ly(
z = df.cor,
type = 'heatmap'
)
p
p <- plot_ly(
z = df.cor,
type = 'heatmap'
)
p
p <- plot_ly(
x = names(df.cor)
z = df.cor,
type = 'heatmap'
)
p <- plot_ly(
x = names(df.cor),
z = df.cor,
type = 'heatmap'
)
p
p
b <- plot_ly(
x = names(df.cor),
y = names(df.cor),
z = df.cor,
type = 'heatmap'
)
b
g <- as.matrix(df.cor)
g
b <- plot_ly(
z = df.cor,
type = 'heatmap'
)
b
b <- plot_ly(
z = g,
type = 'heatmap'
)
b
b <- plot_ly(
x = names(df.cor),
y = names(df.cor),
z = g,
type = 'heatmap'
)
b
help("plot_ly")
b <- plot_ly(
x = names(df.cor),
y = names(df.cor),
z = g,
type = 'heatmap',
color = palette
)
b
b <- plot_ly(
x = names(df.cor),
y = names(df.cor),
z = g,
type = 'heatmap',
#color = palette
)
b
b <- plot_ly(
x = names(df.cor),
y = names(df.cor),
z = g,
type = 'heatmap',
colors = 'Greys'
)
b
setwd("C:/Users/User/R Folder/3. Projects/5. Data Science in Finance, PCA")
library(openxlsx)
df <- read.xlsx("https://academy.dqlab.id/dataset/dqlab_pcadata.xlsx", sheet="3varb")
#standarisasi variabel (centering dan scaling)
df <- scale(
df,
center = TRUE,
scale = TRUE
)
head(df, 3)
cormat <- cor(df)
cormat
cormat2 <- as.matrix(cormat)
library(plotly)
b <- plot_ly(
x = names(df),
y = names(df),
z = cormat2,
type = 'heatmap'
#colors = 'Greys'
)
b
names()
names(df)
names(cormat)
df
typeof(df)
cormatdf <- data.frame(df)
b <- plot_ly(
x = names(cormatdf),
y = names(cormatdf),
z = round(cormat2,2),
type = 'heatmap'
#colors = 'Greys'
)
b
rev(names(cormatdf))
b <- plot_ly(
x = names(cormatdf),
y = rev(names(cormatdf)),
z = round(cormat2,2),
type = 'heatmap'
#colors = 'Greys'
)
b
names(cormatdf)
b <- plot_ly(
x = names(cormatdf),
y = rev(names(cormatdf)),
z = round(cormat2,2),
type = 'heatmap'
#colors = 'Greys'
)
b
names(cormatdf)
b
cormat
b <- plot_ly(
x = names(cormatdf),
y = names(cormatdf),
z = round(cormat2,2),
type = 'heatmap'
#colors = 'Greys'
)
b
b <- plot_ly(
x = rev(names(cormatdf)),
y = rev(names(cormatdf)),
z = round(cormat2,2),
type = 'heatmap'
#colors = 'Greys'
)
b
cormat
b <- plot_ly(
x = names(cormatdf),
y = names(cormatdf),
z = round(cormat2,2),
type = 'heatmap'
#colors = 'Greys'
)
b
# Menghitung Nilai Eigen dan Vektor Eigen
eig <- eigen(cormat)
eig
# Memilih Banyaknya Principal Component
round(
eig$values,
3
)
# Memilih Banyaknya Principal Component
round(
eig$values/ncol(df),
3
)
round(
comsum(
eig$values/ncol(df),
), 3
)
round(cumsum(
eig$values/ncol(df)
),3)
pr.out <- prcomp(
df,
scale. = TRUE,
center = TRUE
)
pr.out
summary(pr.out)
install.packages("factoextra")
library(factoextra)
fviz_eig(pr.out, addlabels = TRUE)
screeplot(
pr.out,
type = 'line'
)
abline(
h = 1,
lty = 3,
col = 'red'
)
# Visualisasi dengan Biplot
pr.out$rotation
birplot(
pr.out,  = 0
)
birplot(
pr.out, scale = 0
)
biplot(
pr.out, scale = 0
)
# Menghitung Skor Baru
df_new <- df %*% pr.out$rotation
df_new[1:6, 1:2]
prcomp(df_new)
df_new <- df %*% pr.out$rotation
df_new[1:6, 1:2]
?prcomp
