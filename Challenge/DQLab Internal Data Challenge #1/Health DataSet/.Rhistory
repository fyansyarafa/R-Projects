library(C50)
risk_rating_model <- C5.0(input_training, class_training)
summary(risk_rating_model)
plot(risk_rating_model)
nb_file = tempfile(fileext = 'Credit Risk Analysis.ipynb')
jsonlite::write_json(nb_data, nb_file, auto_unbox = TRUE, pretty = TRUE)
xfun::file_string(nb_file)  # show file content
nb_rmd = rmarkdown:::convert_ipynb(nb_file)
xfun::file_string(nb_rmd)
library(openxlsx)
#Mempersiapkan data
dataCreditRating <- read.xlsx(xlsxFile = "https://academy.dqlab.id/dataset/credit_scoring_dqlab.xlsx")
dataCreditRating$risk_rating <- as.factor(dataCreditRating$risk_rating)
#select features
col <- c('durasi_pinjaman_bulan','jumlah_tanggungan')
datafeed <- dataCreditRating[,col]
#set seed
set.seed(100)
index <- sample(900,800)
#applying
input_training <- datafeed[index,]
class_training <- dataCreditRating[index,]$risk_rating
input_testing <- datafeed[-index,]
#modeling
library(C50)
risk_rating_model <- C5.0(input_training, class_training)
summary(risk_rating_model)
plot(risk_rating_model)
summary(dataCreditRating)
boxplot(dataCreditRating$pendapatan_setahun_juta)
plot(dataCreditRating$durasi_pinjaman_bulan,dataCreditRating$risk_rating)
plot(dataCreditRating$durasi_pinjaman_bulan,dataCreditRating$jumlah_tanggungan)
plot(dataCreditRating$durasi_pinjaman_bulan,dataCreditRating$risk_rating)
#tes ggplot
library(ggplot2)
plt <- ggplot(data = dataCreditRating, aes(x = dataCreditRating$risk_rating))
plt
plt <- plt + geom_bar()
plt
---
title: "R Notebook"
output: html_notebook
---
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*.
```{r}
plot(cars)
```
Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I*.
When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
#tes ggplot
library(ggplot2)
plt <- ggplot(data = dataCreditRating, aes(x = dataCreditRating$risk_rating))
plt <- plt + geom_bar()
plt + labs()
library(openxlsx)
#Mempersiapkan data
dataCreditRating <- read.xlsx(xlsxFile = "https://academy.dqlab.id/dataset/credit_scoring_dqlab.xlsx")
dataCreditRating$risk_rating <- as.factor(dataCreditRating$risk_rating)
#select features
col <- c('durasi_pinjaman_bulan','jumlah_tanggungan')
datafeed <- dataCreditRating[,col]
#set seed
set.seed(100)
index <- sample(900,800)
#applying index
input_training <- datafeed[index,]
class_training <- dataCreditRating[index,]$risk_rating
input_testing <- datafeed[-index,]
#modeling
library(C50)
risk_rating_model <- C5.0(input_training, class_training)
summary(risk_rating_model)
plot(risk_rating_model)
risk_rating_model <- C5.0(input_training, class_training, control = C5.0Control(label = 'Risk Rating'))
library(C50)
risk_rating_model <- C5.0(input_training, class_training, control = C5.0Control(label = 'Risk Rating'))
summary(risk_rating_model)
head(dataCreditRating)
summary(dataCreditRating)
library(openxlsx)
#Mempersiapkan data
dataCreditRating <- read.xlsx(xlsxFile = "https://academy.dqlab.id/dataset/credit_scoring_dqlab.xlsx")
dataCreditRating$risk_rating <- as.factor(dataCreditRating$risk_rating)
#select features
col <- c('durasi_pinjaman_bulan','jumlah_tanggungan','kpr_aktif')
datafeed <- dataCreditRating[,col]
#set seed
set.seed(100)
index <- sample(900,800)
#applying index
input_training <- datafeed[index,]
class_training <- dataCreditRating[index,]$risk_rating
input_testing <- datafeed[-index,]
#modeling
library(C50)
risk_rating_model <- C5.0(input_training, class_training, control = C5.0Control(label = 'Risk Rating'))
summary(risk_rating_model)
plot(risk_rating_model)
library(openxlsx)
#Mempersiapkan data
dataCreditRating <- read.xlsx(xlsxFile = "https://academy.dqlab.id/dataset/credit_scoring_dqlab.xlsx")
dataCreditRating$risk_rating <- as.factor(dataCreditRating$risk_rating)
#select features
col <- c('durasi_pinjaman_bulan','jumlah_tanggungan','kpr_aktif')
datafeed <- dataCreditRating[,col]
#set seed
set.seed(100)
index <- sample(900,800)
#applying index
input_training <- datafeed[index,]
class_training <- dataCreditRating[index,]$risk_rating
input_testing <- datafeed[-index,]
#modeling
library(C50)
risk_rating_model <- C5.0(input_training, class_training, control = C5.0Control(label = 'Risk Rating'))
summary(risk_rating_model)
library(openxlsx)
#Mempersiapkan data
dataCreditRating <- read.xlsx(xlsxFile = "https://academy.dqlab.id/dataset/credit_scoring_dqlab.xlsx")
dataCreditRating$risk_rating <- as.factor(dataCreditRating$risk_rating)
#select features
col <- c('durasi_pinjaman_bulan','jumlah_tanggungan')
datafeed <- dataCreditRating[,col]
#set seed
set.seed(100)
index <- sample(900,800)
#applying index
input_training <- datafeed[index,]
class_training <- dataCreditRating[index,]$risk_rating
input_testing <- datafeed[-index,]
#modeling
library(C50)
risk_rating_model <- C5.0(input_training, class_training, control = C5.0Control(label = 'Risk Rating'))
summary(risk_rating_model)
plot(risk_rating_model)
names(dataCreditRating)
dataCreditRating$risk_rating == "1"
dataCreditRating[dataCreditRating$risk_rating == "1"]
dataCreditRating[dataCreditRating$risk_rating == "1",]
dataCreditRating[dataCreditRating$risk_rating == "1",] <- "satu"
dataCreditRating[dataCreditRating$risk_rating == "1"] <- "satu"
dataCreditRating$risk_rating[dataCreditRating$risk_rating == "1"] <- "satu"
dataCreditRating$risk_rating[dataCreditRating$risk_rating == "1"]  <-  "satu"
library(openxlsx)
#Mempersiapkan data
dataCreditRating <- read.xlsx(xlsxFile = "https://academy.dqlab.id/dataset/credit_scoring_dqlab.xlsx")
dataCreditRating$risk_rating <- as.factor(dataCreditRating$risk_rating)
#select features
col <- c('durasi_pinjaman_bulan','jumlah_tanggungan')
datafeed <- dataCreditRating[,col]
#set seed
set.seed(100)
index <- sample(900,800)
#applying index
input_training <- datafeed[index,]
class_training <- dataCreditRating[index,]$risk_rating
input_testing <- datafeed[-index,]
#modeling
library(C50)
risk_rating_model <- C5.0(input_training, class_training, control = C5.0Control(label = 'Risk Rating'))
summary(risk_rating_model)
plot(risk_rating_model)
#menggunakan model untuk prediksi testing set
predict(risk_rating_model, input_testing)
input_testing
#menyimpan hasil prediksi testing set ke dalam kolom hasil_prediksi
input_testing$risk_rating <- dataCreditRating[-index,]$risk_rating
input_testing$hasil_prediksi <- predict(risk_rating_model, input_testing)
head(input_testing)
#membuat confusion matrix untuk testing
library(reshape2)
dcast(data = input_testing, hasil_prediksi~risk_rating)
#Menghitung jumlah prediksi yang benar
input_testing$risk_rating==input_testing$hasil_prediksi
#Menghitung jumlah prediksi yang benar
input_testing[input_testing$risk_rating==input_testing$hasil_prediksi,]
#Menghitung jumlah prediksi yang benar
nrow(input_testing[input_testing$risk_rating==input_testing$hasil_prediksi,])
cm
cm = dcast(data = input_testing, hasil_prediksi~risk_rating)
#Menghitung jumlah prediksi yang benar
nrow(input_testing[input_testing$risk_rating==input_testing$hasil_prediksi,])
cm <-  dcast(data = input_testing, hasil_prediksi~risk_rating)
#Menghitung jumlah prediksi yang benar
nrow(input_testing[input_testing$risk_rating==input_testing$hasil_prediksi,])
cm
#prediksi salah
input_testing$risk_rating!=hasil_prediksi
library(openxlsx)
#Mempersiapkan data
dataCreditRating <- read.xlsx(xlsxFile = "https://academy.dqlab.id/dataset/credit_scoring_dqlab.xlsx")
dataCreditRating$risk_rating <- as.factor(dataCreditRating$risk_rating)
#select features
col <- c('durasi_pinjaman_bulan','jumlah_tanggungan')
datafeed <- dataCreditRating[,col]
#set seed
set.seed(100)
index <- sample(900,800)
#applying index
input_training <- datafeed[index,]
class_training <- dataCreditRating[index,]$risk_rating
input_testing <- datafeed[-index,]
#modeling
library(C50)
risk_rating_model <- C5.0(input_training, class_training, control = C5.0Control(label = 'Risk Rating'))
summary(risk_rating_model)
plot(risk_rating_model)
#menggunakan model untuk prediksi testing set
predict(risk_rating_model, input_testing)
#menyimpan hasil prediksi testing set ke dalam kolom hasil_prediksi
input_testing$risk_rating <- dataCreditRating[-index,]$risk_rating
input_testing$hasil_prediksi <- predict(risk_rating_model, input_testing)
head(input_testing)
#membuat confusion matrix untuk testing
library(reshape2)
cm <-  dcast(data = input_testing, hasil_prediksi~risk_rating)
#Menghitung jumlah prediksi yang benar
nrow(input_testing[input_testing$risk_rating==input_testing$hasil_prediksi,])
#menghitung jumlah prediksi yang ssalah
input_testing$risk_rating!=hasil_prediksi
#menghitung jumlah prediksi yang ssalah
input_testing$risk_rating!=input_testing$hasil_prediksi
#menghitung jumlah prediksi yang ssalah
input_testing[input_testing$risk_rating!=input_testing$hasil_prediksi,]
#menghitung jumlah prediksi yang ssalah
nrow(input_testing[input_testing$risk_rating!=input_testing$hasil_prediksi,])
#Menghitung jumlah prediksi yang benar
benar <- nrow(input_testing[input_testing$risk_rating==input_testing$hasil_prediksi,])
#menghitung jumlah prediksi yang ssalah
salah <- nrow(input_testing[input_testing$risk_rating!=input_testing$hasil_prediksi,])
benar
salah
cm
benar/nrow(input_testing)
benar/nrow(input_testing)*100
salah/nrow(input_testing)*100
#menggunakan aplikasi baru untuk diprediksi
aplikasi_baru <- data.frame(jumlah_tanggungan = 6, durasi_pinjaman_bulan = 12)
View(aplikasi_baru)
View(aplikasi_baru)
predict(risk_rating_model,aplikasi_baru)
predict(risk_rating_model,aplikasi_baru)
cor.test(x = dataCreditRating)
names(dataCreditRating)
str(dataCreditRating)
boxplot(data = dataCreditRating, durasi_pinjaman_bulan~risk_rating)
t.test(durasi_pinjaman_bulan~risk_rating, data = dataCreditRating)
cor.test(durasi_pinjaman_bulan~risk_rating, data = dataCreditRating)
install.packages("Hmisc")
mydata = read.csv("https://wiki.q-researchsoftware.com/images/b/b9/Ownership.csv", header = TRUE, fileEncoding="latin1")
head(mydata)
View(mydata)
str(mydata)
mydata.cor = cor(mydata)
mydata.cor
mydata.cor = cor(mydata, method = c('spearman'))
mydata.cor
library(Hmisc)
mydata.rcorr <- rcorr(as.matrix(mydata))
mydata.rcorr
View(mydata.rcorr)
mydata.rcorr <- mydata.rcorr$r
mydata.p <- mydata.rcorr$P
mydata.p <- mydata.rcorr$P
mydata.p =- mydata.rcorr$P
mydata.p <- mydata.rcorr$P
library(Hmisc)
mydata = read.csv("https://wiki.q-researchsoftware.com/images/b/b9/Ownership.csv", header = TRUE, fileEncoding="latin1")
mydata.rcorr <- rcorr(as.matrix(mydata))
mydata.rcorr
mydata.coeff <- mydata.rcorr$r
mydata.p <- mydata.rcorr$P
install.packages("corrplot")
corrplot(mydata.cor)
#Visualizing the correlation matrix
library(corrplot)
corrplot(mydata.cor)
mydata.rcorr[["P"]]
mydata.coeff
mydata.p
#better heatmap
palette = colorRampPalette(c("green", "white", "red")) (20)
heatmap(x = mydata.cor, col = palette, symm = TRUE)
install.packages("arules")
---
title: "Untitled"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
#membaca file csv
transaksi_tabular <- read.csv("https://academy.dqlab.id/dataset/data_transaksi.txt", sep="\t")
head(transaksi_tabular)
head(transaksi_tabular)
transaksi_tabular$Kode.Transaksi=='#01'
transaksi_tabular[transaksi_tabular$Kode.Transaksi=='#01',]
transaksi_tabular[transaksi_tabular$Kode.Transaksi==translaksi_tabular$Kode.Transaksi,]
transaksi_tabular[transaksi_tabular$Kode.Transaksi==transaksi_tabular$Kode.Transaksi,]
#membaca file transaksi
transaksi <- read.transactions(file="https://academy.dqlab.id/dataset/data_transaksi.txt", format="single", sep="\t", cols=c(1,2), skip=1)
#membaca file transaksi
library(arules)
transaksi <- read.transactions(file="https://academy.dqlab.id/dataset/data_transaksi.txt", format="single", sep="\t", cols=c(1,2), skip=1)
transaksi@itemInfo
transaksi@itemInfo
transaksi@itemsetInfo
transaksi@data
# itemFrequency func
itemFrequency(transaksi)
itemFrequency(transaksi, type = 'absolute')
data_item <- itemFrequency(transaksi, type = 'absolute')
# statistik top 3
# sorting
data_item <- sort(x = data_item, decreasing = TRUE)
data_item
#slicing
data_item <- data_item[1:3]
#put to dataframe
data_item <- data.frame('Nama.Produk'=names(data_item), 'Jumlah'=data_item,row.names = NULL)
data_item
#menulis file statistik top3
write.csv(data_item, file="top3_item_rateil.txt", eol = "\r\n")
#menampilkan grafik frekuensi penjualan
itemFrequencyPlot(transaksi)
#melihat tabel itemset per transaksi
inspect(transaksi)
#menghasilkan rules untuk transaksi
apriori(transaksi)
#menghasilkan rules untuk transaksi
mba <- apriori(transaksi)
#melihat rule yang dihasilkan apriori
inspect(mba)
inspect(transaksi)
#memfilter rhs
inspect(subset(mba, rhs %in% 'Sirup'))
#memfilter rhs
inspect(subset(mba, rhs %in% 'Gula'))
#memfilter rhs
inspect(subset(mba, rhs %in% 'Sirup'))
inspect(mba)
#memfileter lhs
inspect(subset(mba, lhs %in% 'Gula'))
#filter lhs dan rhs
inspect(subset(mba, lhs %in% 'Pet Food' & rhs %in% 'Sirup')
#filter lhs dan rhs
inspect(subset(mba, lhs %in% 'Pet Food' & rhs %in% 'Sirup'))
#filter lhs dan rhs
inspect(subset(mba, lhs %in% "Pet Food" & rhs %in% "Sirup"))
# Menghasilkan Rules dengan Parameter Support dan Confidence
apriori(transaksi, parameter = list(supp = 0.1, confidence = 0.5))
# Menghasilkan Rules dengan Parameter Support dan Confidence
mba2 <- apriori(transaksi, parameter = list(supp = 0.1, confidence = 0.5))
inspect(mba2)
#filter lhs rhs (2)
inspect(subset(mba2, lhs %in% "Teh Celup" | rhs %in% "Teh Celup"))
#filter lift
inspect(subset(mba2, (lhs %in% "Teh Celup" | rhs %in% "Teh Celup") & lift>1))
# Rekomendasi - Filter dengan %ain%
inspect(subset(mba2, (lhs %ain% c("Pet Food", "Gula"))))
install.packages("arulesViz")
# visualisasi
plot(subset(mba2, lift>1.11),method = "graph")
# visualisasi
library(arulesViz)
plot(subset(mba2, lift>1.11),method = "graph")
library(reticulate)
use_python("C:\\Users\\User\\Anaconda3\\python.exe")
library(arules)
library(openxlsx)
mydata <- read.csv(file = "sales.csv")
head(mydata)
mydata2 <- read.csv(file = "customers.csv")
head(mydata2)
library(DataExplorer)
#checking missing value
plot_missing(mydata)
plot_missing(mydata2)
dataframe <- data.frame(mydata2$ID, mydata2$Age)
mergeinfo <- merge(
mydata[,c("ID", "Sales")],
mydata2[, c("ID", "Age", "Country")]
)
head(mergeinfo)
currentdata <- as.Date('2020-01-20')
dateinfile <- as.Date(mydata$Date)
duration <- currentdata-dateinfile
duration
durationasdouble <- round(as.double.difftime(duration, units = 'days')/360, 2)
updateddataframe <- data.frame(mergeinfo$ID, mergeinfo$Sales, mydata$Date, durationasdouble)
head(updateddataframe)
countryremoved <- mydata2[!grepl("Greenland", mydata2$Country),]
head(countryremoved)
str(countryremoved)
setwd("C:/Users/User/R Folder/Template/Data Cleansing/rtutorial-data-cleaning")
library(openxlsx)
mydata <- read.csv(file = "sales.csv")
head(mydata)
mydata2 <- read.csv(file = "customers.csv")
head(mydata2)
library(DataExplorer)
#checking missing value
plot_missing(mydata)
plot_missing(mydata2)
dataframe <- data.frame(mydata2$ID, mydata2$Age)
mergeinfo <- merge(
mydata[,c("ID", "Sales")],
mydata2[, c("ID", "Age", "Country")]
)
head(mergeinfo)
currentdata <- as.Date('2020-01-20')
dateinfile <- as.Date(mydata$Date)
duration <- currentdata-dateinfile
duration
durationasdouble <- round(as.double.difftime(duration, units = 'days')/360, 2)
updateddataframe <- data.frame(mergeinfo$ID, mergeinfo$Sales, mydata$Date, durationasdouble)
head(updateddataframe)
countryremoved <- mydata2[!grepl("Greenland", mydata2$Country),]
head(countryremoved)
str(countryremoved)
head(mergeinfo)
head(mydata)
salesminus30days <- head(mydata,-30)
x1 <- as.matrix(salesminus30days)
head(salesminus30days)
str(mydata)
str(salesminus30days)
salesplus30days <- tail(mydata, -30)
x2 <- as.matrix(salesplus30days)
salesplus30days <- tail(mydata, -30)
x2 <- as.matrix(salesplus30days)
head(x2)
head(x1)
mergeinfo
head(mydata)
head(mydata2)
setwd("C:/Users/User/R Folder/3. Projects/Challenge/DQLab Internal Data Challenge #1")
setwd("C:/Users/User/R Folder/3. Projects/Challenge/DQLab Internal Data Challenge #1/Health DataSet")
hdi <- read.csv("Human Development Index (HDI).csv")
hdi <- read.csv("Human Development Index (HDI).csv",sep = "..")
hdi <- read.csv("Human Development Index (HDI).csv",sep = ".")
View(hdi)
?read.csv
hdi <- read.csv("Human Development Index (HDI).csv",sep = ".",na.strings = "NA")
hdi <- read.csv("Human Development Index (HDI).csv",sep = ".",na.strings = "NA",header = TRUE)
library(readr)
Human_Development_Index_HDI_ <- read_csv("Human Development Index (HDI).csv")
View(Human_Development_Index_HDI_)
hdi <- read.csv("Human Development Index (HDI).csv",sep = ".",na.strings = "NA",header = TRUE)
hdi <- read.csv(
"Human Development Index (HDI).csv"
)
hdi <- read.csv(
"Human Development Index (HDI).csv",
header = TRUE
)
hdi <- read.csv(
"Human Development Index (HDI).csv",
header = TRUE
)
View(hdi)
hdi
hdi <- read.csv(
"Human Development Index (HDI).csv",
header = TRUE,
)
hdi <- read.csv(
"Human Development Index (HDI).csv",
header = TRUE
)
colnames(hdi)
colnames(hdi) <- hdi[1,]
View(hdi)
head(hdi)
View(hdi)
View(hdi)
View(hdi)
View(hdi)
hdi <- hdi[-1,]
hdi <- read.csv(
"Human Development Index (HDI).csv",
header = TRUE
)
colnames(hdi) <- hdi[1,]
hdi <- hdi[-1,]
library(DataExplorer)
plot_missing(hdi)
str(hdi)
hdi <- read.csv(
"Human Development Index (HDI).csv",
header = TRUE,
stringsAsFactors = FALSE
)
colnames(hdi) <- hdi[1,]
hdi <- hdi[-1,]
library(DataExplorer)
plot_missing(hdi)
View(hdi)
